import numpy as np

# Corpus
corpus = ['ABAAC', 'CABBC', 'BABCBABC']
unique_words = list(set(''.join(corpus)))
num_topics = 2

# Initial topic assignment (simulating black/red topics)
# We'll use a simple initial assignment
initial_assignment = {
    'A': 0,  # Black topic
    'B': 1,  # Red topic
    'C': 0   # Black topic
}

def initialize_vectors(corpus, unique_words, num_topics, initial_assignment):
    """
    Initialize topic-word and document-topic vectors based on initial assignment
    """
    # Topic-word vector: P(word|topic)
    topic_word_vector = np.zeros((num_topics, len(unique_words)))
    for word in unique_words:
        topic = initial_assignment[word]
        word_index = unique_words.index(word)
        topic_word_vector[topic, word_index] += 1
    
    # Normalize topic-word vector
    topic_word_vector /= topic_word_vector.sum(axis=1, keepdims=True)
    
    # Document-topic vector: P(topic|document)
    document_topic_vector = np.zeros((len(corpus), num_topics))
    for doc_idx, doc in enumerate(corpus):
        doc_words = list(doc)
        for word in doc_words:
            topic = initial_assignment[word]
            document_topic_vector[doc_idx, topic] += 1
    
    # Normalize document-topic vector
    document_topic_vector /= document_topic_vector.sum(axis=1, keepdims=True)
    
    return topic_word_vector, document_topic_vector

def calculate_word_topic_probabilities(topic_word_vector, document_topic_vector, corpus, unique_words):
    """
    Calculate word topic probabilities using Bayes' theorem
    """
    word_topic_probabilities = {}
    
    for doc_idx, doc in enumerate(corpus):
        doc_words = list(doc)
        doc_word_topic_probs = {}
        
        for word in doc_words:
            word_topic_probs = []
            for topic in range(num_topics):
                # P(topic|word) = P(word|topic) * P(topic|document)
                prob = (topic_word_vector[topic, unique_words.index(word)] * 
                        document_topic_vector[doc_idx, topic])
                word_topic_probs.append(prob)
            
            # Normalize probabilities
            total_prob = sum(word_topic_probs)
            word_topic_probs = [p/total_prob for p in word_topic_probs]
            
            doc_word_topic_probs[word] = word_topic_probs
        
        word_topic_probabilities[doc_idx] = doc_word_topic_probs
    
    return word_topic_probabilities

def calculate_document_generation_probability(topic_word_vector, document_topic_vector, corpus, unique_words):
    """
    Calculate the probability of each document being generated by the model
    """
    document_probabilities = []
    
    for doc_idx, doc in enumerate(corpus):
        doc_words = list(doc)
        doc_prob = 1.0
        
        for word in doc_words:
            word_prob = 0
            for topic in range(num_topics):
                # P(word) = sum(P(word|topic) * P(topic|document))
                word_prob += (topic_word_vector[topic, unique_words.index(word)] * 
                               document_topic_vector[doc_idx, topic])
            
            doc_prob *= word_prob
        
        document_probabilities.append(doc_prob)
    
    return document_probabilities

# Part (a): Initialize vectors
topic_word_vectors, document_topic_vectors = initialize_vectors(
    corpus, unique_words, num_topics, initial_assignment
)

print("Initial Topic-Word Vectors:")
print(topic_word_vectors)
print("\nInitial Document-Topic Vectors:")
print(document_topic_vectors)

# Part (b): Calculate word topic probabilities
word_topic_probabilities = calculate_word_topic_probabilities(
    topic_word_vectors, document_topic_vectors, corpus, unique_words
)

print("\nWord Topic Probabilities:")
for doc_idx, doc_probs in word_topic_probabilities.items():
    print(f"Document {doc_idx}:")
    for word, probs in doc_probs.items():
        print(f"  {word}: Topic 1 = {probs[0]:.4f}, Topic 2 = {probs[1]:.4f}")

# Part (c): Recalculate vectors (this would typically involve multiple iterations)
# Note: Full EM algorithm not implemented for brevity

# Part (d): Calculate document generation probabilities
document_generation_probabilities = calculate_document_generation_probability(
    topic_word_vectors, document_topic_vectors, corpus, unique_words
)

print("\nDocument Generation Probabilities:")
for doc_idx, prob in enumerate(document_generation_probabilities):
    print(f"Document {doc_idx}: {prob:.6f}")